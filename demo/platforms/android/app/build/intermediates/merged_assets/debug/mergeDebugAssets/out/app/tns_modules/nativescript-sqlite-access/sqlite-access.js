"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SqliteAccess = /** @class */ (function () {
    function SqliteAccess(db) {
        this._db = db;
    }
    SqliteAccess.prototype.insert = function (table, values) {
        return this._db.insert(table, null, __mapToContentValues(values));
    };
    SqliteAccess.prototype.replace = function (table, values) {
        return this._db.replace(table, null, __mapToContentValues(values));
    };
    SqliteAccess.prototype.update = function (table, values, whereClause, whereArs) {
        return this._db.update(table, __mapToContentValues(values), whereClause, __objectArrayToStringArray(whereArs));
    };
    SqliteAccess.prototype.delete = function (table, whereClause, whereArs) {
        return this._db.delete(table, whereClause, __objectArrayToStringArray(whereArs));
    };
    SqliteAccess.prototype.select = function (sql, params) {
        var me = this;
        return new Promise(function (resolve, error) {
            var cursor = me._db.rawQuery(sql, __objectArrayToStringArray(params));
            try {
                var toArrayOfObject = __processCursor(cursor);
                var result = toArrayOfObject();
                resolve(result);
            }
            catch (ex) {
                error(ex);
            }
        });
    };
    SqliteAccess.prototype.query = function (table, columns, selection, selectionArgs, groupBy, orderBy, limit) {
        var me = this;
        return new Promise(function (resolve, error) {
            var cursor = me._db.query(table, columns, selection, __objectArrayToStringArray(selectionArgs), groupBy, orderBy, limit);
            try {
                var toArrayOfObject = __processCursor(cursor);
                var result = toArrayOfObject();
                resolve(result);
            }
            catch (ex) {
                error(ex);
            }
        });
    };
    SqliteAccess.prototype.execSQL = function (sql) {
        this._db.execSQL(sql);
    };
    SqliteAccess.prototype.beginTransact = function () {
        this._db.beginTransaction();
    };
    SqliteAccess.prototype.commit = function () {
        this._db.setTransactionSuccessful();
        this._db.endTransaction();
    };
    SqliteAccess.prototype.close = function () {
        this._db.close();
        this._db = null;
    };
    return SqliteAccess;
}());
function __processCursor(cursor) {
    return function () {
        var result = [];
        if (cursor.getCount() > 0) {
            while (cursor.moveToNext()) {
                result.push(__getRowValues(cursor, cursor.getColumnCount()));
            }
        }
        cursor.close();
        return result;
    };
}
/**
 * Process the sqlite cursor and return a js object with column/value
 * @param cursor
 * @param columnCount
 * @returns JS object like {[column:string]: any}
 */
function __getRowValues(cursor, columnCount) {
    var rowValue = {};
    var valueType = null;
    var columnName = '';
    for (var i = 0; i < columnCount; i++) {
        valueType = cursor.getType(i);
        columnName = cursor.getColumnName(i);
        switch (valueType) {
            case android.database.Cursor.FIELD_TYPE_INTEGER:
                rowValue[columnName] = cursor.getLong(i);
                break;
            case android.database.Cursor.FIELD_TYPE_FLOAT:
                rowValue[columnName] = cursor.getFloat(i);
                break;
            case android.database.Cursor.FIELD_TYPE_NULL:
                rowValue[columnName] = null;
                break;
            case android.database.Cursor.FIELD_TYPE_BLOB:
                rowValue[columnName] = cursor.getBlob(i);
                break;
            case android.database.Cursor.FIELD_TYPE_STRING:
                rowValue[columnName] = cursor.getString(i);
                break;
        }
    }
    return rowValue;
}
function __openCreateDataBase(dbName, mode) {
    if (dbName === ":memory:") {
        return android.database.sqlite.SQLiteDatabase.create(null);
    }
    mode = mode | android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY;
    return android.database.sqlite.SQLiteDatabase.openDatabase(dbName, null, mode);
}
function __objectArrayToStringArray(params) {
    if (!params)
        return null;
    var stringArray = [];
    for (var key in params) {
        stringArray.push(params[key] && params[key].toString() || null);
    }
    return stringArray;
}
function __mapToContentValues(values) {
    var contentValues = new android.content.ContentValues();
    for (var key in values) {
        if (values.hasOwnProperty(key) && values[key]) {
            contentValues.put(key, values[key]);
        }
        else {
            contentValues.putNull(key);
        }
    }
    return contentValues;
}
function builder(dbName) {
    return new SqliteAccess(__openCreateDataBase(dbName, android.database.sqlite.SQLiteDatabase.OPEN_READWRITE));
}
exports.builder = builder;
//# sourceMappingURL=data:application/json;base64,