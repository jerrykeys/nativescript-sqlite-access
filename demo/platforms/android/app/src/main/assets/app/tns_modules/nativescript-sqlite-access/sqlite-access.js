"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = require("tns-core-modules/application");
var SqliteAccess = /** @class */ (function () {
    function SqliteAccess(db, options) {
        this._db = db;
        this._options = options;
    }
    SqliteAccess.prototype.insert = function (table, values) {
        return this._db.insert(table, null, __mapToContentValues(values));
    };
    SqliteAccess.prototype.replace = function (table, values) {
        return this._db.replace(table, null, __mapToContentValues(values));
    };
    SqliteAccess.prototype.update = function (table, values, whereClause, whereArs) {
        return this._db.update(table, __mapToContentValues(values), whereClause, __objectArrayToStringArray(whereArs));
    };
    SqliteAccess.prototype.delete = function (table, whereClause, whereArs) {
        return this._db.delete(table, whereClause, __objectArrayToStringArray(whereArs));
    };
    SqliteAccess.prototype.select = function (sql, params) {
        var me = this;
        return new Promise(function (resolve, error) {
            var cursor = me._db.rawQuery(sql, __objectArrayToStringArray(params));
            try {
                var toArrayOfObject = __processCursor(cursor);
                var result = toArrayOfObject(me._options.returnType);
                resolve(result);
            }
            catch (ex) {
                error(ex);
            }
        });
    };
    SqliteAccess.prototype.query = function (table, columns, selection, selectionArgs, groupBy, orderBy, limit) {
        var me = this;
        return new Promise(function (resolve, error) {
            var cursor = me._db.query(table, columns, selection, __objectArrayToStringArray(selectionArgs), groupBy, orderBy, limit);
            try {
                var toArrayOfObject = __processCursor(cursor);
                var result = toArrayOfObject(me._options.returnType);
                resolve(result);
            }
            catch (ex) {
                error(ex);
            }
        });
    };
    SqliteAccess.prototype.execSQL = function (sql) {
        this._db.execSQL(sql);
    };
    SqliteAccess.prototype.beginTransact = function () {
        this._db.beginTransaction();
    };
    SqliteAccess.prototype.commit = function () {
        this._db.setTransactionSuccessful();
        this._db.endTransaction();
    };
    SqliteAccess.prototype.rollback = function () {
        this._db.endTransaction();
    };
    SqliteAccess.prototype.close = function () {
        this._db.close();
        this._db = null;
    };
    return SqliteAccess;
}());
function __processCursor(cursor) {
    return function (returnType) {
        var result = [];
        if (cursor.getCount() > 0) {
            while (cursor.moveToNext()) {
                result.push(__getRowValues(cursor, cursor.getColumnCount(), returnType));
            }
        }
        cursor.close();
        return result;
    };
}
/**
 * Process the sqlite cursor and return a js object with column/value
 * @param cursor
 * @param columnCount
 * @returns JS object like {[column:string]: any}
 */
function __getRowValues(cursor, columnCount, returnType) {
    var rowValue = {};
    if (returnType === 1 /* AS_ARRAY */) {
        rowValue = [];
    }
    var primitiveType = null;
    var columnName = '';
    var value = null;
    for (var i = 0; i < columnCount; i++) {
        primitiveType = cursor.getType(i);
        columnName = cursor.getColumnName(i);
        switch (primitiveType) {
            case android.database.Cursor.FIELD_TYPE_INTEGER:
                value = cursor.getLong(i);
                break;
            case android.database.Cursor.FIELD_TYPE_FLOAT:
                value = cursor.getFloat(i);
                break;
            case android.database.Cursor.FIELD_TYPE_NULL:
                value = null;
                break;
            case android.database.Cursor.FIELD_TYPE_BLOB:
                value = cursor.getBlob(i);
                break;
            case android.database.Cursor.FIELD_TYPE_STRING:
                value = cursor.getString(i);
                break;
        }
        // If result is wanted as array of array
        if (Array.isArray(rowValue) && returnType === 1 /* AS_ARRAY */) {
            rowValue.push(value);
            continue;
        }
        rowValue[columnName] = value;
    }
    return rowValue;
}
function __openCreateDataBase(dbName, mode) {
    if (dbName === ":memory:") {
        return android.database.sqlite.SQLiteDatabase.create(null);
    }
    dbName = __getContext().getDatabasePath(dbName).getAbsolutePath().toString();
    mode = mode | android.database.sqlite.SQLiteDatabase.CREATE_IF_NECESSARY;
    return android.database.sqlite.SQLiteDatabase.openDatabase(dbName, null, mode);
}
function __objectArrayToStringArray(params) {
    if (!params)
        return null;
    var stringArray = [];
    for (var key in params) {
        stringArray.push(params[key] && params[key].toString() || null);
    }
    return stringArray;
}
function __mapToContentValues(values) {
    var contentValues = new android.content.ContentValues();
    for (var key in values) {
        if (values.hasOwnProperty(key)
            && values[key] !== null && values[key] !== undefined) {
            contentValues.put(key, values[key]);
        }
        else {
            contentValues.putNull(key);
        }
    }
    return contentValues;
}
function __getContext() {
    return (app.android.context
        || (app.getNativeApplication && app.getNativeApplication()));
}
function DbBuilder(dbName, options) {
    if (!dbName)
        throw "Must specify a db name";
    console.dir(options);
    options = options || {
        version: 1
    };
    // Ensure version be 1 or greater and returnType AS_OBJECT
    options.version = options.version || 1;
    options.returnType = options.returnType || 0 /* AS_OBJECT */;
    var db = __openCreateDataBase(dbName, android.database.sqlite.SQLiteDatabase.OPEN_READWRITE);
    var curVersion = db.getVersion();
    console.log("db v: " + curVersion + ", " + options.version);
    if (options.version > curVersion) {
        db.setVersion(options.version);
        var tableCreateScripts = options.createTableScriptsFn && options.createTableScriptsFn();
        var tableDroptScripts = options.dropTableScriptsFn && options.dropTableScriptsFn();
        try {
            console.log("script", tableCreateScripts);
            // Dropping all tables
            if (tableDroptScripts) {
                for (var script in tableDroptScripts) {
                    db.execSQL(tableDroptScripts[script]);
                }
            }
            console.log("drop", tableDroptScripts);
            // Creating all tables
            if (tableCreateScripts) {
                for (var script in tableCreateScripts) {
                    db.execSQL(tableCreateScripts[script]);
                }
            }
        }
        catch (error) {
            db.setVersion(curVersion);
            db.close();
            throw error;
        }
    }
    else if (options.version < curVersion) {
        db.close();
        throw "It is not possible to set the version " + options.version + " to database, because is lower then current version, Db current version is " + curVersion;
    }
    return new SqliteAccess(db, options);
}
exports.DbBuilder = DbBuilder;
//# sourceMappingURL=data:application/json;base64,