"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var nativescript_sqlite_access_1 = require("nativescript-sqlite-access");
var HomeViewModel = /** @class */ (function (_super) {
    __extends(HomeViewModel, _super);
    function HomeViewModel() {
        var _this = _super.call(this) || this;
        _this.db = nativescript_sqlite_access_1.DbBuilder("test.sqlite", {
            version: 3,
            createTableScriptsFn: function () {
                return ['CREATE TABLE test (ID INTEGER PRIMARY KEY AUTOINCREMENT, test TEXT)'];
            },
            dropTableScriptsFn: function () {
                return ['DROP TABLE IF EXISTS test'];
            }
        });
        _this.set('text', '');
        _this.set('hint', 'Test me here');
        _this.set('items', []);
        _this.reload();
        return _this;
    }
    HomeViewModel.prototype.addText = function () {
        var id = this.db.insert("test", {
            test: this.get('text')
        });
        this.set('text', '');
        this.reload();
    };
    HomeViewModel.prototype.remove = function (event) {
        this.db.beginTransact();
        var test = this.get("items")[event.index];
        var deleted = this.db.delete("test", 'ID=?', [test.ID]);
        console.log("deleted count.: ", deleted);
        this.db.commit();
        this.reload();
    };
    HomeViewModel.prototype.reload = function () {
        this.db.select("SELECT * FROM test", null).then(function (result) {
            //this.set('items', result);
            console.log(result);
        })
            .catch(console.error);
    };
    return HomeViewModel;
}(observable_1.Observable));
exports.HomeViewModel = HomeViewModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9tZS12aWV3LW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9tZS12aWV3LW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQThEO0FBQzlELHlFQUFtRjtBQUVuRjtJQUFtQyxpQ0FBVTtJQUV6QztRQUFBLFlBQ0ksaUJBQU8sU0FnQlY7UUFkRyxLQUFJLENBQUMsRUFBRSxHQUFHLHNDQUFTLENBQUMsYUFBYSxFQUFxQjtZQUNsRCxPQUFPLEVBQUUsQ0FBQztZQUNWLG9CQUFvQixFQUFFO2dCQUNsQixPQUFPLENBQUMscUVBQXFFLENBQUMsQ0FBQztZQUNuRixDQUFDO1lBQ0Qsa0JBQWtCLEVBQUM7Z0JBQ2YsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUE7WUFDeEMsQ0FBQztTQUNKLENBQUMsQ0FBQztRQUVILEtBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLEtBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2pDLEtBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RCLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7SUFDbEIsQ0FBQztJQUdELCtCQUFPLEdBQVA7UUFDSSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDNUIsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1NBQ3pCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBRUQsOEJBQU0sR0FBTixVQUFPLEtBQUs7UUFDUixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRCw4QkFBTSxHQUFOO1FBQ0ksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsTUFBTTtZQUNsRCw0QkFBNEI7WUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTCxvQkFBQztBQUFELENBQUMsQUEvQ0QsQ0FBbUMsdUJBQVUsR0ErQzVDO0FBL0NZLHNDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHtEYkJ1aWxkZXIsIElEYXRhYmFzZSwgRGJDcmVhdGlvbk9wdGlvbnN9IGZyb20gJ25hdGl2ZXNjcmlwdC1zcWxpdGUtYWNjZXNzJztcblxuZXhwb3J0IGNsYXNzIEhvbWVWaWV3TW9kZWwgZXh0ZW5kcyBPYnNlcnZhYmxlIHtcbiAgICBwcml2YXRlIGRiOiBJRGF0YWJhc2U7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5kYiA9IERiQnVpbGRlcihcInRlc3Quc3FsaXRlXCIsIDxEYkNyZWF0aW9uT3B0aW9ucz57XG4gICAgICAgICAgICB2ZXJzaW9uOiAzLFxuICAgICAgICAgICAgY3JlYXRlVGFibGVTY3JpcHRzRm46ICgpPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBbJ0NSRUFURSBUQUJMRSB0ZXN0IChJRCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsIHRlc3QgVEVYVCknXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkcm9wVGFibGVTY3JpcHRzRm46KCk9PiB7IFxuICAgICAgICAgICAgICAgIHJldHVybiBbJ0RST1AgVEFCTEUgSUYgRVhJU1RTIHRlc3QnXVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNldCgndGV4dCcsICcnKTtcbiAgICAgICAgdGhpcy5zZXQoJ2hpbnQnLCAnVGVzdCBtZSBoZXJlJyk7XG4gICAgICAgIHRoaXMuc2V0KCdpdGVtcycsIFtdKTtcbiAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICB9XG5cblxuICAgIGFkZFRleHQoKSB7XG4gICAgICAgIGxldCBpZCA9IHRoaXMuZGIuaW5zZXJ0KFwidGVzdFwiLCB7XG4gICAgICAgICAgICB0ZXN0OiB0aGlzLmdldCgndGV4dCcpXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldCgndGV4dCcsICcnKTtcbiAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICB9XG5cbiAgICByZW1vdmUoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5kYi5iZWdpblRyYW5zYWN0KCk7XG4gICAgICAgIGxldCB0ZXN0ID0gdGhpcy5nZXQoXCJpdGVtc1wiKVtldmVudC5pbmRleF07XG4gICAgICAgIGxldCBkZWxldGVkID0gdGhpcy5kYi5kZWxldGUoXCJ0ZXN0XCIsICdJRD0/JywgW3Rlc3QuSURdKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJkZWxldGVkIGNvdW50LjogXCIsIGRlbGV0ZWQpO1xuICAgICAgICB0aGlzLmRiLmNvbW1pdCgpO1xuICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgIH1cblxuICAgIHJlbG9hZCgpIHtcbiAgICAgICAgdGhpcy5kYi5zZWxlY3QoXCJTRUxFQ1QgKiBGUk9NIHRlc3RcIiwgbnVsbCkudGhlbihyZXN1bHQ9PiB7XG4gICAgICAgICAgICAvL3RoaXMuc2V0KCdpdGVtcycsIHJlc3VsdCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAgfVxuXG59XG4iXX0=